@attribute [Authorize]
@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject IAccountService AccountService
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="modal" id="create-room-modal">
    <div class="modal-body">
        <button type="button" class="close" id="close-modal">X</button>
        <header>Create Room</header>
        <div>
            <input @bind="newGroupName">
        </div>
        <footer>
            <button @onclick="() => CreateRoom(newGroupName)">Create</button>
        </footer>
    </div>
</div>

<div class="side-menu">
    @foreach(var group in groups)
    {
        <a @onclick="() => JoinRoom(group.Name, group.Id)" class="room-button">
            @group.Name
        </a>
    }

    <a class="room-button" id="create-room-btn">
        <strong>+</strong>
    </a>    
</div>

<div class="chat">
    <div class="chat-body" id="chat-body">
        @foreach(var message in messages.OrderBy(x => x.CreatedAt).TakeLast(50)){
        <div class="message">
            <header>@message.Sender:</header>
            <p>@message.Text</p>
            <footer>@message.CreatedAt</footer>
        </div>
        }
    </div>
    
    <div class="chat-input">
        <input @bind="message" disabled="@(!IsConnected || string.IsNullOrEmpty(GroupName))" id="inputToSend" type="text">
        <button @onclick="() => Send(message, GroupName, GroupId)" disabled="@(!IsConnected || string.IsNullOrEmpty(GroupName))" style="border: none;max-width: 140px;">Send</button>
    </div>
</div>

<style>

.modal {
  display: none;
  position: fixed;
  min-height: 100vh;
  min-width: 100vw;
  z-index: 200;
  top: 0;
  left: 0;
  background-color: rgba(0.2, 0.2, 0.2, 0.8);
}

.modal.active {
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-body > .close {
  position: absolute;
  top: 5px;
  right: 5px;
  margin-top: 0;
}

.modal-body {
  position: relative;
  min-width: 300px;
  max-width: 450px;
  display: flex;
  flex-direction: column;
  background-color: #5c4773;
  padding: 1rem;
  border-radius: 5px;
}

.modal-body > * {
  margin-top: 0.75rem;
}

.modal-body > header {
  color: #fff;
  font-size: 24px;
}

.modal-body > div > input {
  width: 100%;
}

.modal-body > footer {
  text-align: center;
}

.side-menu{
    background-color: #494f54;
    min-width: 100px;
    max-width: 100px;
    z-index: 50;
    box-shadow: 1px 0 2px 0 #333;
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow: hidden;
}

.room-button{
    color: white;
    text-decoration: none;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0.75rem 1rem 0;
    height: 68px;
    border-radius: 5px;
    box-shadow: 0 1px 3px 1px #333;
    background-color: #57446b;
    text-align: center;
}

.room-button:hover {
    box-shadow: 0 2px 3px 1px #222;
    color: white;
    text-decoration: none;
}

.room-button > strong {
    font-size: 36px;
}

.chat-body{
    background-color: white;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    padding-bottom: 1rem;
    overflow: auto;
    max-height: calc(100% - 70px);
    width: 100%
}

.message {
    display: flex;
    flex-direction: row;
    margin-top: 3px;
}

.message:first-child{
    margin-top: auto;
}

.message > header {
    font-weight: bold;
    min-width: 100px;
    text-align: right;
}

.message > * {
    padding: 0.2rem;
}

.message > p {
    margin: 0;
    flex-grow: 5;
}

.message > footer {
    min-width: 60px;
    text-align: center;
    padding-right: 1rem;
}

.chat{
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  max-height: 100%;
}

.chat-input {
  background-color: #494f54;
  min-height: 70px;
  max-height: 70px;
  z-index: 25;
  box-shadow: 0 -1px 2px 0 #333;
  display: flex;
  flex-direction: row;
  padding: 1rem;
}

.chat-input > input {
  flex-grow: 2;
}

.chat-input > button {
  flex-grow: 1;
}

</style>

@code {
    private HubConnection? hubConnection;
    private string? ConnectionId;
    private List<MessageViewModel> messages = new List<MessageViewModel>();
    private string? message;
    private string? newGroupName;
    private string? GroupName;
    private string? GroupId;
    private List<ChatViewModel> groups = new List<ChatViewModel>();
    private const string baseUrl = "http://localhost:5159";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{baseUrl}/ChatHub")
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        while(!IsConnected) {};

        ConnectionId = hubConnection.ConnectionId;

        await UpdateGroups();

        hubConnection.On<string, string>("ReceiveMessage", (sender, message) =>
        {
            var newMessage = $"{sender}: {message}";
            messages.Add(new MessageViewModel { Text = message, CreatedAt = DateTime.Now, Group = GroupName, Sender = sender });
            StateHasChanged();
        });

        hubConnection.On<string, string>("CreateChat", (groupId, groupName) =>
        {
            groups.Add(new ChatViewModel { Id = groupId, Name = groupName});
            GroupId = groupId;
            GroupName = groupName;
            StateHasChanged();
        });
    }

    private async Task UpdateGroups()
    {
        groups = await ChatService.GetChats();
        StateHasChanged();
    }

    private async Task UpdateMessages(string groupName)
    {
        messages = await ChatService.GetMessagesFromGroup(groupName);
        StateHasChanged();
        await ScrollOnBottom();
    }

    private async Task JoinRoom(string groupName, string groupId)
    {
        if (hubConnection is not null)
        {
            await ChatService.JoinRoom(ConnectionId, groupName, groupId);
            await UpdateMessages(groupName);

            GroupId = groupId;
            GroupName = groupName;
        }
    }

    private async Task CreateRoom(string groupName)
    {
        if (hubConnection is not null)
        {
            await ChatService.CreateRoom(groupName);
            messages = new List<MessageViewModel>();
        }
    }

    private async Task Send(string message, string groupName, string groupId)
    {
        if (hubConnection is not null)
        {
            await ChatService.SendMessage(message, AccountService.User.UserName, AccountService.User.Id, groupName, groupId);
            await ScrollOnBottom();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        await JS.InvokeVoidAsync("startModal");
    }

    public async Task ScrollOnBottom()
    {
        await JS.InvokeVoidAsync("scrollAlwaysBottomAndCleanInput");
    }
}